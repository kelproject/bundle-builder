#!/bin/bash
set -eo pipefail

if [[ -f /etc/environment_proxy ]]; then
    source /etc/environment_proxy
fi

if [[ "$1" == "-" ]]; then
    bundle_file="$1"
else
    bundle_file=/tmp/bundle.tgz
    if [[ "$1" ]]; then
        put_url="$1"
    fi
fi

app_dir=/app
build_root=/tmp/build
cache_root=/tmp/cache
buildpack_root=/opt/buildpacks

mkdir -p $app_dir
mkdir -p $cache_root
mkdir -p $buildpack_root
mkdir -p $build_root/.profile.d

function output_redirect() {
    if [[ "$bundle_file" == "-" ]]; then
        cat - 1>&2
    else
        cat -
    fi
}

function echo_title() {
    echo $'\e[1G----->' $* | output_redirect
}

function echo_normal() {
    echo $'\e[1G      ' $* | output_redirect
}

function ensure_indent() {
    while read line; do
        if [[ "$line" == --* ]]; then
            echo $'\e[1G'$line | output_redirect
        else
            echo $'\e[1G      ' "$line" | output_redirect
        fi
    done
}

## Copy application code over

if [ -d "/tmp/app" ]; then
    cp -rf /tmp/app/. $app_dir
else
    cat | tar -xmC $app_dir
fi

# on Heroku, there are two separate directories, and some
# buildpacks expect that.
cp -r $app_dir/. $build_root

## Buildpack fixes

export APP_DIR="$app_dir"
export HOME="$app_dir"
export REQUEST_ID=$(openssl rand -base64 32)
export STACK=kel-ubuntu-14

## Buildpack detection

buildpacks=($buildpack_root/*)
buildpack_name=
selected_buildpack=

init_buildpack() {
    if [[ "${1}" == "detect" ]]; then
        for buildpack in "${buildpacks[@]}"; do
            buildpack_name=$($buildpack/bin/detect "$build_root") && selected_buildpack=$buildpack && break
        done
    else
        if [[ "${1}" == https://buildpack.kelproject.com/* ]]; then
            buildpack="$buildpack_root/${1#https://buildpack.kelproject.com/}"
            if [[ ! -d "$buildpack" ]]; then
                echo_title "${1#https://buildpack.kelproject.com/} is not a Kel buildpack"
                exit 1
            fi
            buildpack_name=$($buildpack/bin/detect "$build_root") && selected_buildpack=$buildpack
            if [[ ! -n "$buildpack_name" ]]; then
                echo_title "Incompatible with ${1#https://buildpack.kelproject.com/} buildpack"
                exit 1
            fi
        else
            echo_title "Fetching custom buildpack"
            buildpack="$buildpack_root/custom"
            rm -fr "$buildpack"
            url=${BUILDPACK_URL%#*}
            committish=${BUILDPACK_URL#*#}
            if [ "$committish" == "$url" ]; then
                committish="master"
            fi
            if [[ -n "$SSH_KEY" ]]; then
                mkdir -p ~/.ssh/
                chmod 700 ~/.ssh/
                echo $SSH_KEY | base64 -d > ~/.ssh/id_rsa
                chmod 400 ~/.ssh/id_rsa
                echo 'StrictHostKeyChecking=no' > ~/.ssh/config
                chmod 600 ~/.ssh/config
            fi
            set +e
            git clone --branch "$committish" --depth=1 "$url" "$buildpack" &> /dev/null
            SHALLOW_CLONED=$?
            set -e
            if [ $SHALLOW_CLONED -ne 0 ]; then
                # if the shallow clone failed partway through, clean up and try a full clone
                rm -rf "$buildpack"
                git clone --quiet "$url" "$buildpack"
                pushd "$buildpack" &>/dev/null
                    git checkout --quiet "$committish"
                popd &>/dev/null
            fi
            selected_buildpack="$buildpack"
            buildpack_name=$($buildpack/bin/detect "$build_root") && selected_buildpack=$buildpack
        fi
    fi
}

if [[ -n "$BUILDPACK_URL" ]]; then
    init_buildpack "$BUILDPACK_URL"
else
    init_buildpack detect
fi

if [[ -n "$selected_buildpack" ]]; then
    echo_title "$buildpack_name app detected"
else
    echo_title "Unable to select a buildpack"
    exit 1
fi

## Buildpack compile

{ $selected_buildpack/bin/compile "$build_root" "$cache_root" 1>&2; } 2>&1 | ensure_indent

$selected_buildpack/bin/release "$build_root" "$cache_root" > $build_root/.release

## Display process types

echo_title "Discovering process types"
if [[ -f "$build_root/Procfile" ]]; then
    types=$(ruby -e "require 'yaml';puts YAML.load_file('$build_root/Procfile').keys().join(', ')")
    echo_normal "Procfile declares types -> $types"
fi
default_types=""
if [[ -s "$build_root/.release" ]]; then
    default_types=$(ruby -e "require 'yaml';puts (YAML.load_file('$build_root/.release')['default_process_types'] || {}).keys().join(', ')")
    [[ $default_types ]] && echo_normal "Default process types for $buildpack_name -> $default_types"
fi

## Produce bundle

if [[ -f "$build_root/.bundleignore" ]]; then
    tar -z --exclude='.git' -X "$build_root/.bundleignore" -C $build_root -cf $bundle_file . | cat
else
    tar -z --exclude='.git' -C $build_root -cf $bundle_file . | cat
fi

if [[ "$bundle_file" != "-" ]]; then
    bundle_size=$(du -Sh "$bundle_file" | cut -f1)
    echo_title "Compiled bundle size is $bundle_size"
    if [[ $put_url ]]; then
        curl -0sS -o /dev/null -X PUT -T $bundle_file "$put_url"
    fi
fi
